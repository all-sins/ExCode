/*
	 Laboratorijas darbs - 7. praktiskais darbs - vienizmçru dinamiskie masîvi:
	  Pçc piektâ darba uzdevuma pârveidot masîvu par dinamisko. jâbût iespçjai:
	  1.1. Izveidot masîvu no jauna (ja jau eksistç - tad sâkumâ atbrîvot atmiòu);
	  1.2. Aizpildît automâtiski;
	  1.3. Aizpildît manuâli.

	  Tâlâk jâbût iespçjai pçc lietotâja izvçles (ciklâ):
	  2.1. Izpildît individuâlo uzdevumu;
	  2.2. Izmainît masîva izmçru, saglabâjot masîvâ iepriekðçjâs vçrtîbas (ja parâdâs jauni elementi,
		 tad jâaizpilda manuâli tikai tie);
	  2.3. Sâkt programmu no sâkuma;
	  2.4. Beigt darbu
*/
#pragma hdrstop
#pragma argsused

#include <iostream.h>
#include <conio.h>
#include <stdlib.h>


char izvelne();
char izvelne2();
int jautat_izmeru();
int skaitit_lvs(double*, int);
void print_double_arr(double*, int);

//Jautât, vai lietotâjs grib atkartot programmu
char izvelne() {
/*
	  Pçc piektâ darba uzdevuma pârveidot masîvu par dinamisko. jâbût iespçjai:
	  1.1. Izveidot masîvu no jauna (ja jau eksistç - tad sâkumâ atbrîvot atmiòu);
	  1.2. Aizpildît automâtiski;
	  1.3. Aizpildît manuâli.
*/
	//lietotaja atbilde
	char atb;

	cout << "\nIzvelies: \n";

	cout << "1 - Aizpildit masivu automatiski\n";
	cout << "2 - Aizpildit masivu manuali\n";
	cout << "\n\n";

	cin >> atb;
	clrscr();

	return atb;
}

char izvelne2() {
/*
Tâlâk jâbût iespçjai pçc lietotâja izvçles (ciklâ):
	  2.1. Izpildît individuâlo uzdevumu;
	  2.2. Izmainît masîva izmçru, saglabâjot masîvâ iepriekðçjâs vçrtîbas (ja parâdâs jauni elementi,
		 tad jâaizpilda manuâli tikai tie);
	  2.3. Sâkt programmu no sâkuma;
	  2.4. Beigt darbu
*/
	//lietotaja atbilde
	char atb;

	cout << "\nIzvelies: \n";

	cout << "1 - Izpildit individualo uzdevumu\n";
	cout << "2 - Izmainit masiva izmeru saglabajot ieprieksejas vertibas\n";
	cout << "3 - Sakt programmu no sakuma\n";
	cout << "4 - Beigt darbu\n";
	cout << "\n\n";

	cin >> atb;
	clrscr();

	return atb;
}

int jautat_izmeru() {
	//masiva izmers
	int n;

	do {
		cout << "Ievadi masiva izmeru (Nedzrikst but mazak par 0): ";
		cin >> n;
	} while (n < 1);

	return n;
}

int skaitit_lvs(double *arr, int n) {
	//LIS - Largest Increasing Subsequence (visgaraka augosa apaksvirkne)
	//LIS garums
	int lis_length = 1;
	//vieta masiva kur sakas LIS
	int lis_start = 0;
	//satur augosas apaksvirknes garumu for iteracija
	int is = 1;
	int i = 0;

	// atrod LIS sakumu un garumu
	for (i = 0; i < n; i++) {
		if (i != 0){
			if (arr[i] > arr[i-1]) {
				is++;

				if (is >= lis_length) {
					lis_length = is;
					lis_start = i - lis_length;
				}
			} else {
				is = 1;
			}
		}
	}

	lis_start++;

	if (lis_length == 1) {
		cout << "\nNav Visgaraka Augosa Apaksvirkne.\n";
	} else {
		cout << "\n\nVisgaraka Augosa Apaksvirkne: \n";

		for (i = lis_start; i < lis_start + lis_length; i++)
			cout << arr[i] << "\t";

		cout << "\n\n";
		cout << "Garums: " << lis_length << "\n";

	}

	return 0;
}

void print_double_arr(double *arr, int n) {
	int i = 0;

	cout << "\nMasiva vertibas : \n\n";
	if (n < 120)
	{
		for (i = 0; i < n; i++)
			cout << arr[i] << "\t";
	}
	else
	{
		for (i = 0; i < 120; i++)
		cout << arr[i] << "\t";
		cout << "\n\n\t\t... Un vel talak " << n-120  << " vertibas ...";
	}
}


int main()
{
	//masiva izmers
	double dmas_size = 0;
	//iterators
	int i;
	//Lietotaja atbilde
	char atb1, atb2, atb3, atb4;
	//mainîgais nejauðu skaitïu ìenerâtoram
	time_t t;
	//raditajs uz dinamisku masivu
	double *dmas = NULL;
	//lietotâja atbilde izvelnç
	char izvele;
	//ja 1, programma sakas no jauna
	int skip = 0;

	//nejauðu skaitïu ìenerâtors
	srand((unsigned) time(&t));

	do {
		skip = 0;
		// Izveidot masivu no jauna
		free(dmas);
		dmas = NULL;

		dmas_size = jautat_izmeru();

		//calloc lai inicializet masivu ar nullem
		dmas = (double*) calloc(dmas_size, sizeof(double));

		print_double_arr(dmas, dmas_size);
		izvele = izvelne();

		//Aizpildit masivu automatiski
		if (izvele == '1') {

			clrscr();
			cout << "Pasreizejais masiva izmers ir " << dmas_size << ".\n";

			for (i = 0; i < dmas_size; i++) {
				dmas[i] = 1 + rand() % 100;
			}

		}
		else if (izvele == '2') {

			cout << "Pasreiz masiva izmers ir " << dmas_size << ".\n";

			cout << "Notiek manuala masiva elementu aizpildisana. \n";

			for (i = 0; i < dmas_size ; i++) {
				cout << "Ievadi masiva " << i + 1 << ". elementu: ";
				cin >> dmas[i];
			}
		}

		print_double_arr(dmas, dmas_size);

		do {
			izvele = izvelne2();

			if (izvele == '1') {
				skaitit_lvs(dmas, dmas_size);
			}
			else if (izvele == '2') {
				dmas_size = jautat_izmeru();
				dmas = (double*) realloc(dmas, dmas_size * sizeof(double));

				for (i = 0; i < dmas_size ; i++) {
					if (dmas[i] == 0) {
						cout << "Ievadi masiva " << i + 1 << ". elementu: ";
						cin >> dmas[i];
					}
				}

				print_double_arr(dmas, dmas_size);
			}
			else if (izvele == '3') {
				skip = 1;
			}
			else if (izvele == '4') {
				exit(1);
			}
		} while (skip == 0);

		cout << "\n";
	} while (1);

}


