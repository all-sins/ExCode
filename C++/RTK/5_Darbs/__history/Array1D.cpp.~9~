#pragma hdrstop
#pragma argsused

#include <stdio.h>
#include <conio.h>
#include <iostream.h>

/*
Izveidot masivu. Masiva maksimalais izmers ir 100 elementi.
Nedrikst izmantot otru masivu! Izmainam janotiek taja pasa masiva!
Lietotajam jabut iespejams izmainit cik elementus velas ievadit masiva!
Kad programma pabeigta, prasa vai atkartot.

Arturs Alsins P1-3
21. Variants
Masivs no N elementiem satur latinu alfabeta burtus.
Noteikt cik reizes masiva ir sastopams katrs burts.
*/

void main()
{
	// Mainigie
	int i, n, j, lielieBurti, mazieBurti, currentCharCount, forOutputFormating;
	i = n = j = lielieBurti = mazieBurti = currentCharCount, forOutputFormating = 0;
	char ievade[100];
	char REPEAT, currentChar;

	int a,b;

	do {
		do {

			// Teksta krasa - sarkana
			system("COLOR C");
			clrscr();

			// Nosacijumu pieteiksana
			printf("Ludzu nemiet vera, ka TIKAI vertibas,");
			printf(" \nkas pieder skaitlu intervalam no 1 lidz 100 ieskaitot tiks pienemtas.");
			printf("\nNepareizas ievades gadijuma programma atkartos vaicajumu.\n");

			// Elementu skaita ievade
			printf("\nLudzu ievadiet cik burtus velaties ievadit...\n\n");
			scanf("%u", &n);
			clrscr();
		} while ((n <= 0) && (n > 100));

		// Programa skaita no 0-ta elementa.
		n -= 1;

		system("COLOR F");
		clrscr();


		for (i = 0; i <= n; i++) {

			// Char mainigais lietotaja ievades uzglabasanai
			char c;

			// Lietotajs skaita no 1 lidz n.
			// Izvade pieskaita viens, lai saglabatu logiku
			printf("Ievadiet %u. elementu!\n",i+1);
			cin >> c;
			ievade[i] = c;
			clrscr();


			// Lielo un mazo burtu uzskaite
			if ((ievade[i] >= 'A') && (ievade[i] <= 'Z')) {
				lielieBurti++;
				printf("%c ir lielais burts!\n", ievade[i]);
				printf("Lielo burtu skaits = %u\n", lielieBurti);
				getch();
				clrscr();
			}
			else if ((ievade[i] >= 'a') && (ievade[i] <= 'z')) {
				mazieBurti++;
				printf("%c ir mazais burts!\n", ievade[i]);
				printf("Mazo burtu skaits = %u\n", mazieBurti);
				getch();
				clrscr();
			}
		};

		printf("Starting...");
		getch();
		clrscr();

		for (i = 0; i <= n; i++) {

			if (ievade[i] != ievade[i+1]) {
				forOutputFormating++;
				currentChar = ievade[i];
				currentCharCount = 0;

				for (j = 0; j <= n; j++) {

					/*	![=]! FOR DEBUGGING ![=]!
					clrscr();
					printf("CycleCounter = %d\n", j);
					printf("%d %c's counted so far!\n", currentCharCount, currentChar);
					printf("%c = %c ?\n\n", ievade[j], currentChar);
					getch();
					*/

					if (ievade[j] == currentChar) {

						/*	![=]! FOR DEBUGGING ![=]!
						printf("%c = %c\nIncreasing currentCharCount!\n\n", ievade[j], currentChar);
						*/

						currentCharCount++;
					}
				}

					/*	![=]! FOR DEBUGGING ![=]!
					} else {
						printf("%c != %c\nDoing nothing!\n\n", ievade[j], currentChar);
					}
					*/

				if (forOutputFormating % 5 == 0) {
					printf("%c = %d\n", currentChar, currentCharCount);
				} else {
					printf("%c = %d\t", currentChar, currentCharCount);
				}
				getch();
			}
		};
        printf("\n");

		// Masiva elementu vertibu izdruka
		for (i = 0; i <= n; i++) {
			printf("%u. elementa vertiba = %c\n", i+1, ievade[i]);
		}

		// Krasas nomainisana, mazo un lielo burtu skaita izdruka
		system("COLOR D");
		printf("\nMazie burti = %u\n", mazieBurti);
		printf("Lielie burti = %u\n", lielieBurti);

		// Vaicajums lietotajam vai velas atkartot programmu
		printf("\n\nVai velaties atkartot programmu?\n");
		printf("\n\"Ja\" vai \"ja\"\t-\tJa, atkartot programmu.");
		printf("\nJebkas cits\t-\tNe, aizvert programmu.\n\n");
		cin >> REPEAT;
	}
	while ((REPEAT == 'y') || (REPEAT == 'Y'));
}
