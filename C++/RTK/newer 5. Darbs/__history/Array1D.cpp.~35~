#pragma hdrstop
#pragma argsused

#include <stdio.h>
#include <conio.h>
#include <iostream.h>
#include <stdlib.h>


/*
 1. PARBAUDES
 2. PARBAUDES
 3. PRECIZEJUMS PIE IZVADES

 Izveidot masivu. Masiva maksimalais izmers ir 100 elementi.
 Nedrikst izmantot otru masivu! Izmainam janotiek taja pasa masiva!
 Lietotajam jabut iespejams izmainit cik elementus velas ievadit masiva!
 Kad programma pabeigta, prasa vai atkartot.

 Arturs Alsins P1-3
 21. Variants
 Masivs no N elementiem satur latinu alfabeta burtus.
 Noteikt cik reizes masiva ir sastopams katrs burts.
 */

void main() {
	// Mainigie
	int i, n, j, lielieBurti, mazieBurti, currentCharCount, forOutputFormating, forAdditionalOutputFormating;
	i = n = j = lielieBurti = mazieBurti = currentCharCount = forOutputFormating = forAdditionalOutputFormating = 0;
	char ievade[100];
	char c, c2, currentChar, REPEAT;

	int charToInt(char c);

	do {
		do {

			// Teksta krasa - sarkana
			system("COLOR C");
			clrscr();

			// Nosacijumu pieteiksana
			printf("Ludzu nemiet vera, ka TIKAI vertibas,");
			printf(" \nkas pieder skaitlu intervalam no 1 lidz 100 ieskaitot tiks pienemtas.");
			printf("\nNepareizas ievades gadijuma programma atkartos vaicajumu.\n");

			// Elementu skaita ievade
			printf("\nLudzu ievadiet cik burtus velaties ievadit...\n\n");
			scanf("%c", &c);
			clrscr();
			n = charToInt(c);

			if ((c <= 48) || (c > 57)) {

				// Teksta krasa - sarkana
				system("COLOR C");
				clrscr();

				printf("\t\t\t\t!!! Kluda !!!\n\t\t%c nepieder pie veselo skaitlu intervala [1 - 100]!", c);
				getch();
			}
		}
		while ((n <= 0) || (n > 100));


		// Programa skaita no 0-ta elementa.
		n -= 1;

		for (i = 0; i <= n; i++) {

			do {

				// Teksta krasa - white
				system("COLOR F");
				clrscr();

				// Lietotajs skaita no 1 lidz n.
				// Izvade pieskaita viens, lai saglabatu logiku
				printf("Ievadiet %u. elementu!\n", i + 1);
				cin >> c2;
				clrscr();
				if ( !( (c2 >= 'A') && (c2 <= 'Z')   || (c2 >= 'a') && (c2 <= 'z') ) ) {

					// Teksta krasa - sarkana
					system("COLOR C");
					clrscr();

					printf("\t\t\t\t!!! Kluda !!!\n\t\t\t%c nav latinu alfabeta burts!");
					getch();
					clrscr();
				}
			} while ( !( (c2 >= 'A') && (c2 <= 'Z')   || (c2 >= 'a') && (c2 <= 'z') ) );

				ievade[i] = c2;

			// Lielo un mazo burtu uzskaite
			if ((ievade[i] >= 'A') && (ievade[i] <= 'Z')) {
				lielieBurti++;

				/* ![=]! FOR DEBUGGING ![=]!
				printf("%c ir lielais burts!\n", ievade[i]);
				printf("Lielo burtu skaits = %u\n", lielieBurti);
				getch();
				clrscr();
				*/

			}
			else if ((ievade[i] >= 'a') && (ievade[i] <= 'z')) {
				mazieBurti++;

				/* ![=]! FOR DEBUGGING ![=]!
				printf("%c ir mazais burts!\n", ievade[i]);
				printf("Mazo burtu skaits = %u\n", mazieBurti);
				getch();
				clrscr();
				*/

			}
		};


		for (i = 0; i <= n; i++) {

			if (ievade[i] != ievade[i + 1]) {
			// if () There probably is a way to fix the doubles,
			// but I can only think of a way with another array

				forOutputFormating++;
				currentChar = ievade[i];
				currentCharCount = 0;

				for (j = 0; j <= n; j++) {

					/* ![=]! FOR DEBUGGING ![=]!
					 clrscr();
					 printf("CycleCounter = %d\n", j);
					 printf("%d %c's counted so far!\n", currentCharCount, currentChar);
					 printf("%c = %c ?\n\n", ievade[j], currentChar);
					 getch();
					 */

					if (ievade[j] == currentChar) {

						/* ![=]! FOR DEBUGGING ![=]!
						 printf("%c = %c\nIncreasing currentCharCount!\n\n", ievade[j], currentChar);
						 */

						currentCharCount++;
					}
				}

				/* ![=]! FOR DEBUGGING ![=]!
				   else
				 printf("%c != %c\nDoing nothing!\n\n", ievade[j], currentChar);

				 */

				if (i == 0) {
					printf("\t\t\tBurti un to skaits\n\n");
				};

				if (forOutputFormating % 5 == 0) {
					printf("%c = %d\n", currentChar, currentCharCount);;
				}
				else {
					printf("%c = %d\t", currentChar, currentCharCount);
				}
			}
		};


		// Masiva elementu vertibu izdruka
		/*
		 for (i = 0; i <= n; i++) {
		 printf("%u. elementa vertiba = %c\n", i+1, ievade[i]);
		 }
		 */

		// Krasas nomainisana, mazo un lielo burtu skaita izdruka
		printf("\n\nMazie burti = %u\n", mazieBurti);
		printf("Lielie burti = %u\n", lielieBurti);

		// Vaicajums lietotajam vai velas atkartot programmu
		printf("\n\n\t\tVai velaties atkartot programmu?\n");
		printf("\"J\" vai \"j\t\t-\tJa, atkartot programmu.");
		printf("\nJebkas cits\t\t-\tNe, aizvert programmu.\n\n");

		cin >> REPEAT;

	} // whole program
	while ((REPEAT == 'J') || (REPEAT == 'j'));

} // for main



// Funkcija pienem char un parvers par int
int charToInt(char c) {
	char str[2];

	str[0] = c;
	str[1] = '\0';

	return strtol(str, NULL, 0);
}
